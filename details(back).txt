#####
package.json :Περιγράφει το project, τις εξαρτήσεις (π.χ. express, mysql2), πώς τρέχεις τον server (start, dev) και πού βρίσκεται (π.χ. GitHub).
#####

#####
authController.js :Περιέχει τη λογική για:
register() : καταχωρεί νέο χρήστη (με approved = 0),
login() : ελέγχει password, approved, δημιουργεί JWT token
#####

#####
db.js : συνδέει το backend σου με τη MySQL.
#####

#####
authMiddleware.js : Έλεγχος JWT token:
Αν είναι έγκυρο, περνά το req.user με id και role,
Αλλιώς μπλοκάρει την πρόσβαση με 403
#####

#####
server.js : Το βασικό αρχείο που:
Εκκινεί τον Express server,
Ρυθμίζει CORS, JSON body parser,
Φορτώνει όλα τα routes (/auth, /auction, /bids)
#####

#####
auth.js : Ορίζει τα endpoints /api/auth/register και /api/auth/login, που καλούν τις αντίστοιχες συναρτήσεις από το authController.
#####

#####
auctionController.js : Περιέχει business logic για τις δημοπρασίες:
createAuction() : εισάγει item + κατηγορίες,
getAuctionById() : φέρνει item + seller + categories,
updateAuction() : επιτρέπεται πριν ξεκινήσει & χωρίς προσφορές,
deleteAuction() : αν δεν ξεκίνησε & δεν υπάρχουν προσφορές,
searchAuctions() : αναζήτηση με query params (όνομα, περιγραφή, τιμές, location, κατηγορία)
#####

#####
bidController.js:
placeBid() : έλεγχος αν είναι bidder, αν η δημοπρασία είναι ενεργή, αν η προσφορά είναι μεγαλύτερη από την προηγούμενη, και εισαγωγή στη βάση,
getBidsForItem() : επιστρέφει όλες τις προσφορές ενός item (με username και rating του κάθε bidder)
#####

#####
auction.js : Ορίζει όλα τα endpoints /api/auction/...:
POST / : δημιουργία δημοπρασίας,
GET /:id : προβολή δημοπρασίας,
PUT /:id : επεξεργασία,
DELETE /:id : διαγραφή,
GET /search : αναζήτηση με φίλτρα
#####

#####
bids.js : Ορίζει:
POST /api/bids/:itemId : υποβολή προσφοράς (με JWT έλεγχο),
GET /api/bids/:itemId : επιστροφή όλων των προσφορών ενός αντικειμένου
#####

#####
schema.sql : Αυτό το αρχείο περιέχει τις εντολές CREATE TABLE για να δημιουργηθεί η σχεσιακή βάση δεδομένων της εφαρμογής δημοπρασιών.Είναι ένας πίνακας με:
users : Αποθηκεύει όλους τους χρήστες της εφαρμογής (admin, seller, bidder, visitor), με κωδικούς, ρόλους και εγκρίσεις ,
items : Τα αντικείμενα που βγαίνουν σε δημοπρασία. Περιλαμβάνουν τίτλο, περιγραφή, τιμές, χρόνο, πωλητή ,
item_categories	: Επιτρέπει σε κάθε αντικείμενο να ανήκει σε πολλές κατηγορίες ,
bids : Οι προσφορές των χρηστών. Περιλαμβάνουν ποσό, ώρα, item και bidder ,
messages : Αποθηκεύει μηνύματα μεταξύ χρηστών (πωλητή–νικητή), με στοιχεία αποστολέα, παραλήπτη, περιεχόμενο, ώρα, αναγνωσμένο/μη
εκτελείται μία φορά για να δημιουργηθεί η βάση auction_db
#####

#####
messages.js : Ορίζει τις διαδρομές /api/messages για:
Αποστολή (POST /)
Εισερχόμενα (GET /inbox)
Απεσταλμένα (GET /sent)
Σήμανση ως αναγνωσμένο (PUT /:id/read)
#####

#####
messageController.js :Περιέχει όλη τη λογική για:
Αποθήκευση νέου μηνύματος
Ανάκτηση εισερχομένων & απεσταλμένων
Ενημέρωση κατάστασης is_read
#####

#####
exportController.js :
exportToJSON() : Επιστρέφει όλα τα items ως JSON array.
exportToXML() : Δημιουργεί XML σύμφωνα με τη δομή της εκφώνησης (DTD eBay-style).
#####

#####
export.js :Ορίζει endpoints:
GET /api/export/json
GET /api/export/xml
Μόνο για admin. Συνδέεται με exportController.
#####

#####
ratings.js : Ορίζει endpoints REST για αξιολογήσεις χρηστών μετά από μια ολοκληρωμένη δημοπρασία.
POST /api/ratings :	Υποβολή αξιολόγησης από έναν χρήστη σε άλλον (π.χ. πωλητής → πλειοδότη)
GET /api/ratings/:userId : Προβολή όλων των αξιολογήσεων που έχει λάβει ένας χρήστης
-Χρησιμοποιεί το verifyToken για να επιβεβαιώσει την ταυτότητα του χρήστη
-Καλεί συναρτήσεις από το αρχείο ratingController.js
#####

##### 
ratingController.js : Περιέχει τη λογική για την υποβολή και προβολή αξιολογήσεων.
submitRating() : Επιτρέπει την αξιολόγηση μόνο αν ο χρήστης συμμετείχε στη δημοπρασία (πωλητής ή νικητής)
getRatingsForUser()	: Επιστρέφει όλες τις αξιολογήσεις που έχει λάβει ένας χρήστης
-Αποτρέπει διπλές αξιολογήσεις
-Κάνει έλεγχο ρόλου seller / bidder
-Επιβεβαιώνει συμμετοχή πριν αποθηκεύσει
##### 

#####
history.js : Ορίζει routes για καταγραφή ιστορικού προβολών και προτάσεις σε χρήστες.
POST /api/history/:itemId	Καταγράφει ότι ο χρήστης επισκέφθηκε το item
GET /api/history/recommendations	Επιστρέφει προτεινόμενες δημοπρασίες, με βάση προηγούμενες επισκέψεις
-Χρησιμοποιεί verifyToken
-Καλεί τις συναρτήσεις από historyController.js
#####

#####
historyController.js : Περιέχει τη λογική για την καταγραφή ιστορικού και την παραγωγή προσωποποιημένων προτάσεων.
logView()	Καταγράφει ποια δημοπρασία επισκέφθηκε ο χρήστης
getRecommendations()	Επιστρέφει άλλα αντικείμενα από κατηγορίες που έχει ήδη δει ο χρήστης
-Αποφεύγει να προτείνει ίδια items
-Χρησιμοποιεί JOINs για σύσταση βάσει κατηγορίας
#####